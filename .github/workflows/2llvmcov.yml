name: LLVM-Cov


on:
  pull_request:
    types: [synchronize,opened]
  #push:
    # in the Bors staging/trying only
  #  branches: ['*staging*', '*trying*']

  #push:
  # do not repeat test after bors staging
  # branches-ignore: development
  # branches: [ '*staging*', '*trying*', master ]

#on:
#  workflow_run:
#    branches-ignore: development
#    # run only if Build workflow is successfully completed
#    #    and build cache was created.
#    workflows: ["Build"]
#    # run it in staging environment, and on master branch only
#    types:
#      - completed

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always

jobs:
  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install Protoc
        run: sudo apt-get install -y protobuf-compiler
      - name: Setup llvm-cov for cargo
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Set up cargo cache
        id: cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            target/
          key: "${{ github.workflow }}-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}"

      - run: |
          echo "${{github.event.pull_request.number}}"

      - name: Unit tests should pass successfully
        run: |
          cargo llvm-cov test --locked --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

      - name: Clean up cache
        if: success()
        run: |
          find ./target/llvm-cov-target/debug -maxdepth 1 -type f -delete
          rm -rf ./target/llvm-cov-target/debug/examples
          rm lcov.info


      #- name: Publish code coverage report
      #  uses: peaceiris/actions-gh-pages@v3
      #  with:
      #    publish_dir: ./coverage/html
      #    publish_branch: coverage
      #    allow_empty_commit: true
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #- name: Upload coverage
      #  if: success()
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: test-coverage
      #    path: ./coverage/html/